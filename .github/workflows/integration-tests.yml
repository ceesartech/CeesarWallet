name: CI/CD Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 476114151082
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: python, javascript, typescript

  # Python ML Algorithm Tests
  python-tests:
    name: Python ML Algorithm Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd ml-algorithm
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist

      - name: Run Python tests with coverage
        run: |
          cd ml-algorithm
          export PYTHONPATH=src
          python -m pytest src/trading/tests/ \
            --cov=src/trading \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=pytest-results.xml \
            -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ml-algorithm/coverage.xml
          flags: python
          name: python-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python-test-results
          path: ml-algorithm/pytest-results.xml

  # Kotlin Backend Tests
  kotlin-tests:
    name: Kotlin Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run Kotlin tests
        run: |
          ./gradlew test --continue
          ./gradlew jacocoTestReport

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: kotlin-test-results
          path: |
            core/build/test-results/
            backend/build/test-results/
            frontend/build/test-results/
            infra/build/test-results/

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: kotlin-coverage-reports
          path: |
            core/build/reports/jacoco/
            backend/build/reports/jacoco/
            frontend/build/reports/jacoco/
            infra/build/reports/jacoco/

  # Frontend Web Tests
  frontend-web-tests:
    name: Frontend Web Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/web/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend/web
          npm ci

      - name: Run linting
        run: |
          cd frontend/web
          npm run lint

      - name: Run type checking
        run: |
          cd frontend/web
          npm run type-check

      - name: Run unit tests
        run: |
          cd frontend/web
          npm run test -- --coverage --watchAll=false

      - name: Run accessibility tests
        run: |
          cd frontend/web
          npm run test:a11y

      - name: Build application
        run: |
          cd frontend/web
          npm run build

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-web-test-results
          path: frontend/web/coverage/

  # Frontend Mobile Tests
  frontend-mobile-tests:
    name: Frontend Mobile Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/mobile/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend/mobile
          npm ci

      - name: Run linting
        run: |
          cd frontend/mobile
          npm run lint

      - name: Run type checking
        run: |
          cd frontend/mobile
          npm run type-check

      - name: Run unit tests
        run: |
          cd frontend/mobile
          npm run test -- --coverage --watchAll=false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-mobile-test-results
          path: frontend/mobile/coverage/

  # Infrastructure Tests
  infrastructure-tests:
    name: Infrastructure Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infra/cdk/package-lock.json

      - name: Install CDK dependencies
        run: |
          cd infra/cdk
          npm ci

      - name: Run CDK synth
        run: |
          cd infra/cdk
          npm run cdk:synth

      - name: Run infrastructure tests
        run: |
          cd infra/cdk
          npm run test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: infrastructure-test-results
          path: infra/cdk/test-results/

  # End-to-End Integration Tests
  e2e-tests:
    name: End-to-End Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests, kotlin-tests, frontend-web-tests, frontend-mobile-tests]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          # Python dependencies
          cd ml-algorithm
          pip install -r requirements.txt
          
          # Node.js dependencies
          cd ../frontend/web
          npm ci
          
          cd ../mobile
          npm ci

      - name: Start ML services
        run: |
          cd ml-algorithm
          export PYTHONPATH=src
          python -m trading.engine_service &
          python -m trading.inference_service &
          sleep 10

      - name: Start frontend services
        run: |
          cd frontend/web
          npm run build
          npm start &
          sleep 15

      - name: Run E2E tests
        run: |
          cd frontend/web
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: frontend/web/cypress/videos/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [python-tests, kotlin-tests]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd ml-algorithm
          pip install -r requirements.txt
          pip install locust

      - name: Run performance tests
        run: |
          cd ml-algorithm
          export PYTHONPATH=src
          python -m pytest src/trading/tests/test_performance.py -v

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: ml-algorithm/performance-results/

  # Deployment Tests
  deployment-tests:
    name: Deployment Tests
    runs-on: ubuntu-latest
    needs: [security-scan, python-tests, kotlin-tests, frontend-web-tests, frontend-mobile-tests, infrastructure-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging
        run: |
          ./scripts/deploy-production.sh --environment=staging

      - name: Run smoke tests
        run: |
          # Test API endpoints
          curl -f https://staging-api.ceesarwallet.com/health || exit 1
          curl -f https://staging-api.ceesarwallet.com/models || exit 1
          
          # Test frontend
          curl -f https://staging.ceesarwallet.com || exit 1

      - name: Deploy to production
        if: success()
        run: |
          ./scripts/deploy-production.sh --environment=production

      - name: Run production smoke tests
        if: success()
        run: |
          # Test API endpoints
          curl -f https://api.ceesarwallet.com/health || exit 1
          curl -f https://api.ceesarwallet.com/models || exit 1
          
          # Test frontend
          curl -f https://ceesarwallet.com || exit 1

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [security-scan, python-tests, kotlin-tests, frontend-web-tests, frontend-mobile-tests, infrastructure-tests, e2e-tests, performance-tests, deployment-tests]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.security-scan.result == 'success' && needs.python-tests.result == 'success' && needs.kotlin-tests.result == 'success' && needs.frontend-web-tests.result == 'success' && needs.frontend-mobile-tests.result == 'success' && needs.infrastructure-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
        run: |
          echo "✅ All tests passed successfully!"
          
      - name: Notify on failure
        if: ${{ needs.security-scan.result == 'failure' || needs.python-tests.result == 'failure' || needs.kotlin-tests.result == 'failure' || needs.frontend-web-tests.result == 'failure' || needs.frontend-mobile-tests.result == 'failure' || needs.infrastructure-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
        run: |
          echo "❌ Some tests failed. Please check the logs."
          exit 1
